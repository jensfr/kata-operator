/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/harche/kata-operator/pkg/apis/cache/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KataconfigLister helps list Kataconfigs.
// All objects returned here must be treated as read-only.
type KataconfigLister interface {
	// List lists all Kataconfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kataconfig, err error)
	// Kataconfigs returns an object that can list and get Kataconfigs.
	Kataconfigs(namespace string) KataconfigNamespaceLister
	KataconfigListerExpansion
}

// kataconfigLister implements the KataconfigLister interface.
type kataconfigLister struct {
	indexer cache.Indexer
}

// NewKataconfigLister returns a new KataconfigLister.
func NewKataconfigLister(indexer cache.Indexer) KataconfigLister {
	return &kataconfigLister{indexer: indexer}
}

// List lists all Kataconfigs in the indexer.
func (s *kataconfigLister) List(selector labels.Selector) (ret []*v1alpha1.Kataconfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kataconfig))
	})
	return ret, err
}

// Kataconfigs returns an object that can list and get Kataconfigs.
func (s *kataconfigLister) Kataconfigs(namespace string) KataconfigNamespaceLister {
	return kataconfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KataconfigNamespaceLister helps list and get Kataconfigs.
// All objects returned here must be treated as read-only.
type KataconfigNamespaceLister interface {
	// List lists all Kataconfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kataconfig, err error)
	// Get retrieves the Kataconfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Kataconfig, error)
	KataconfigNamespaceListerExpansion
}

// kataconfigNamespaceLister implements the KataconfigNamespaceLister
// interface.
type kataconfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kataconfigs in the indexer for a given namespace.
func (s kataconfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kataconfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kataconfig))
	})
	return ret, err
}

// Get retrieves the Kataconfig from the indexer for a given namespace and name.
func (s kataconfigNamespaceLister) Get(name string) (*v1alpha1.Kataconfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kataconfig"), name)
	}
	return obj.(*v1alpha1.Kataconfig), nil
}
